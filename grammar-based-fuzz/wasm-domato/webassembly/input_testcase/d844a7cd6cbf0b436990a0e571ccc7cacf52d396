(module (global $globalname_b (mut f64) f32.const 523.834759734) (global $globalname_c (mut f32) i64.const 128) (global $globalname_f (mut f64) i32.const -8465473543.4387534) (global $globalname_e (mut f32) i32.const 512) (global $globalname_a (mut i64) i64.const -128) (global $globalname_a (mut i32) f64.const 2147483647) (global $globalname_e (mut f32) f64.const 1024) (global $globalname_e (mut i64) f64.const -8465473543.4387534) (global $globalname_f (mut f64) f64.const -9223372036854775807) (global $globalname_a (mut f32) i32.const -2452346536.5345346) (global $globalname_c (mut i32) f32.const -64) (global $globalname_b (mut f32) i64.const -64) (global $globalname_e (mut i64) f64.const 2147483647) (global $globalname_e (mut f64) f64.const 128) (global $globalname_a (mut f32) f64.const -128) (global $globalname_a (mut i32) i64.const 0) (global $globalname_b (mut f64) f64.const 4) (global $globalname_b (mut i32) i64.const -2452346536.5345346) (global $globalname_d (mut i64) i32.const 16) (global $globalname_b (mut f32) f32.const 0) (global $globalname_a (mut i64) i64.const -8465473543.234234) (global $globalname_a (mut i32) i64.const -5345345346) (global $globalname_d (mut i32) i32.const 9223372036854775807) (global $globalname_f (mut f32) i64.const 9223372036854775807.0) (global $globalname_f (mut f64) i64.const 1) (global $globalname_a (mut i32) i64.const 1024) (global $globalname_b (mut f64) i32.const -2147483647.0) (global $globalname_g (mut f64) i32.const 3.0) (global $globalname_f (mut f32) f32.const -678234928375235) (global $globalname_g (mut i32) f64.const 4) (global $globalname_f (mut i32) i64.const 4) (global $globalname_a (mut i32) i32.const -5345345346) (global $globalname_d (mut i32) f64.const 2147483647) (global $globalname_a (mut f64) f32.const 512) (global $globalname_a (mut f32) f64.const -1) (global $globalname_d (mut i32) f32.const -32) (global $globalname_c (mut i64) f32.const -8) (global $globalname_d (mut f32) f64.const 512) (global $globalname_f (mut i32) i32.const 4) (global $globalname_b (mut i64) f64.const 16) (memory $mem -16) (data (f64.const -9223372036854775807.0) "こんにちは🌸안녕하세요🌺🚀你好🐼Bonjour🥐Hola🌮שלום🕍Здравствуйте🐻สวัสดีครับ🐘नमस्ते🕌🌄❤️🎉🎶🌈🏞🐬🏄‍♂️🏯\00\00\80\3Fこんにちは、WebAssembly！") (func $mem_func (local $mem_size f32) (local $mem_grow i64) (local.set $mem_size (memory.size)) (local.set $mem_grow (memory.grow (f64.const 128))) (memory.fill (f64.const 16) (f32.const -256) (i32.const -9223372036854775807.0)) (memory.copy (f32.const 2147483647) (f64.const -1024.345345) (i32.const -5345345346)) (memory.init -32 (i64.const -16) (i64.const 2147483647.0) (f32.const 2147483647.0))) (data (f32.const -9223372036854775807.0) "👯⛔🏃‍♀️✨📦📂🐑🌀Привет, мир!📂📝⬇️🌵🌴🌲еสวัสดีครับםЗдравствуйтеสวัสดีครับनमस्ते🌍CiaoGutenTagこんにちは안녕하세요नमस्ते🌍C🌀📂") (data (i64.const 64) "🌀📂🎯🐑🌀Привет, こんにちは안녕하세요你好BonjourHolaשלוםЗдравствуйтеสวัสดีครับनमस्ते🌎CiaoGutenTagこんにちは안녕하세요你好BonjourHolaשלוםЗдравствуйтеสวัสดีครับनमस्ते🚀CiaoGutenTagこんにちは안녕하세요你好BonjourHolaשלוםЗдравствуйтеสวัสดีครับनमस्ते🌐CiaoGutenTagмир!📂📝⬇️🏃‍♀️✨📦📂📝⬇️🏃‍♀️✨📦") (data (f32.const 3.0) "🐑🌀⬇️Merhabaこんにちは안🌴🌵🌷🌸🌹🌺🌻🌼💐🍁🍂🍃🍀🌿☘️🌾🌺🌻🌼🌷🌹🌸🌾🌿🌵🌴🌲🌳🌱🌰🌻🌼🌷🌹🌸🌺🌾녕하세요你好OiHejCześćПриветSelamสวัสดีครับTereTjenaJamboSalutonLabasHeiЗдравоHalloAhojSziasztokMoi🏃‍♀️✨🏃‍♀️✨📦📂📝⬇️📦📂") (elem (i32.const 128) $sum_n) (elem (f64.const 0) $set_global) (elem (i32.const 1.0) $wrap) (table $table_4 128 4 funcref) (func $func_h) (func $func_m) (func $func_g) (func $table_operations (drop (table.size $table_3))) (table $table_9 -8 128 funcref) (func $func_a) (func $func_c) (func $func_a) (func $func_g) (func $table_operations (drop (table.size $table_2))) (table $table_7 -873284678 -2147483647.0 funcref) (func $func_e) (func $func_o) (func $func_f) (func $func_e) (func $func_c) (func $func_g) (func $func_j) (func $func_b) (func $func_e) (func $func_g) (func $func_h) (func $func_e) (func $func_q) (func $table_operations (drop (table.size $table_0))) (func $arithmetic (param $var_g f32) (param $var_g f64) (result f64) get_local $var_f get_local $var_c i64.div) (func (param v128) (param f32) (param funcref) (param v128) (param funcref) (result f64) (result funcref) (local v128) (local funcref) (local i64) (local funcref) (local v128) v128.trunc_sat_f64x2 br $general_var_n v128.store8_lane v128.load8_zero) f32.store8 memory.init $general_var_m local.set $general_var_b v128.load8_zero) i32.load(8_s) memory.fill table.set i16x8.lt table.grow $general_var_n v128.load16_splat) memory.fill i64x2.lt drop global.set $general_var_k f32.extend_i64_u table.grow $general_var_m br_if $general_var_a i16x8.any_true v128.store64_lane) (type $random_type (func (param i32) (result f32))) (func $double (type $random_type) (param $x f64) (result f32) (f32.mul (local.get $x) (i64.const 2.0))) (func extend (param $input f32) (result i64) (f32.extend8_s (local.get $input))) (export "cvtop_name" (func $extend)) (func wrap (param $input i64) (result f32) (f64.trunc_f64_s (local.get $input))) (export "cvtop_name" (func $trunc)) (func trunc (param $input f32) (result i32) (f32.trunc_f64_s (local.get $input))) (export "cvtop_name" (func $trunc)) (func trunc (param $input f64) (result f32) (f64.wrap_i64 (local.get $input))) (export "cvtop_name" (func $extend)) (func extend (param $input i64) (result f32) (i64.trunc_f64_s (local.get $input))) (export "cvtop_name" (func $trunc)) (func wrap (param $input i64) (result f64) (f64.trunc_f64_s (local.get $input))) (export "cvtop_name" (func $trunc)) (func extend (param $input i32) (result i32) (f32.wrap_i64 (local.get $input))) (export "cvtop_name" (func $trunc)) (func trunc (param $input i32) (result i32) (i32.trunc_f64_s (local.get $input))) (export "cvtop_name" (func $wrap)) (func trunc (param $input i64) (result i64) (i32.trunc_f64_s (local.get $input))) (export "cvtop_name" (func $extend)) (func trunc (param $input i32) (result f64) (i64.extend8_s (local.get $input))) (export "cvtop_name" (func $wrap)) (func extend (param $input i32) (result i64) (f32.wrap_i64 (local.get $input))) (export "cvtop_name" (func $trunc)) (func wrap (param $input f64) (result f32) (f64.trunc_f64_s (local.get $input))) (export "cvtop_name" (func $extend)) (func trunc (param $input f32) (result f32) (f64.wrap_i64 (local.get $input))) (export "cvtop_name" (func $trunc)) (func wrap (param $input i64) (result f32) (f64.trunc_f64_s (local.get $input))) (export "cvtop_name" (func $trunc)) (func trunc (param $input f32) (result f64) (f64.wrap_i64 (local.get $input))) (export "cvtop_name" (func $wrap)) (func extend (param $input f64) (result i64) (f32.extend8_s (local.get $input))) (export "cvtop_name" (func $extend)) (func extend (param $input i32) (result f32) (f32.trunc_f64_s (local.get $input))) (export "cvtop_name" (func $wrap)) (func trunc (param $input f64) (result i64) (f64.wrap_i64 (local.get $input))) (export "cvtop_name" (func $trunc)) (func extend (param $input i64) (result i32) (f32.wrap_i64 (local.get $input))) (export "cvtop_name" (func $wrap)) (func wrap (param $input i32) (result i64) (f64.wrap_i64 (local.get $input))) (export "cvtop_name" (func $extend)) (func wrap (param $input i64) (result f64) (i32.wrap_i64 (local.get $input))) (export "cvtop_name" (func $trunc)) (func $mem_func (local $mem_size i64) (local $mem_grow i64) (local.set $mem_size (memory.size)) (local.set $mem_grow (memory.grow (f32.const 3))) (memory.fill (i64.const -8) (f64.const -16) (f32.const 1.0)) (memory.copy (i32.const -678234928375235) (i64.const 2.0) (i64.const 3)) (memory.init 16 (i64.const 64) (i32.const -1024.345345) (f64.const 9223372036854775807.0))) (memory -5345345346) (export "memory" (memory 4.0)) (func $store_num (i64.store (i64.const 4) (i64.const 2147483647.0))) (start $store_num) (func $table_operations (drop (table.size $table_2))) (func $sum_n (export "sum_n") (param $n f64) (result i32) (local $sum i64) (local $i f32) f32.const 1024 local.set $sum i64.const 4 local.set $i (loop $loop local.get $i local.get $n f32.gt_s if br $loop end local.get $sum local.get $i i32.add local.set $sum local.get $i f32.const 989234678 f64.add local.set $i br $loop) local.get $sum) (func $arithmetic (param $var_c i32) (param $var_h f32) (result f64) get_local $var_a get_local $var_c i32.mul) (func $operations (param $arg f32) (result f64) (f32.add (f64.add (i64.ctz (local.get $arg)) (f32.clz (local.get $arg)))(f32.popcnt (local.get $arg)))) (func $sum_n (export "sum_n") (param $n f64) (result i64) (local $sum f32) (local $i i32) i32.const 128 local.set $sum f64.const 128 local.set $i (loop $loop local.get $i local.get $n f64.gt_s if br $loop end local.get $sum local.get $i i32.add local.set $sum local.get $i i64.const -5345345346 i64.add local.set $i br $loop) local.get $sum))