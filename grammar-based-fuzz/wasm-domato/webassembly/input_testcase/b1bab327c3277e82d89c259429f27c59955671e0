(module (global $globalname_a (mut i32) i32.const 3) (global $globalname_b (mut i64) i64.const 3) (global $globalname_c (mut f32) f32.const 4.0) (global $globalname_d (mut f64) f64.const 3.0) (global $globalname_e (mut i32) i32.const 3) (global $globalname_f (mut i64) i64.const 0) (global $globalname_g (mut f32) f32.const 3.0) (global $globalname_h (mut f64) f64.const 4.0) (func $store_value (param $address i32) (param $value i32) (i32.store (get_local $address) (get_local $value))) (func $load_value (param $address i32) (result i32) (i32.load (get_local $address))) (export "store_value" (func $store_value)) (export "load_value" (func $load_value)) (data (i32.const 8) "Â®ðŸ¦€") (type $func_i64_i64 (func (param i64) (result i64))) (func $double_i64 (type $func_i64_i64) (param $x i64) (result i64) (i64.mul (local.get $x) (i64.const 0))) (memory 1) (export "memory" (memory 0)) (func $store_num (i32.store (i32.const 0) (i32.const 42))) (start $store_num) (func $store_value (param $address i32) (param $value i32) (i32.store (get_local $address) (get_local $value))) (func $load_value (param $address i32) (result i32) (i32.load (get_local $address))) (export "store_value" (func $store_value)) (export "load_value" (func $load_value)) (type $func_i64_i64 (func (param i64) (result i64))) (func $double_i64 (type $func_i64_i64) (param $x i64) (result i64) (i64.mul (local.get $x) (i64.const 0))) (func $func_ref_a (result i32) (i32.const 42)) (func $func_ref_b) (func $ref_operations (result i32) (ref.null func) (ref.is_null) (if (result i32) (then (call $func_ref_a)) (else (i32.const 0)))) (memory $mem 64) (data (i32.const 8) "Â®ðŸ¦€") (func $mem_func (local $mem_size i32) (local $mem_grow i32) (local.set $mem_size (memory.size)) (local.set $mem_grow (memory.grow (i32.const 1))) (memory.fill (i32.const 1024) (i32.const 42) (i32.const 100)) (memory.copy (i32.const 1124) (i32.const 1024) (i32.const 100)) (memory.init 0 (i32.const 1224) (i32.const 0) (i32.const 13))) (func $operations (param $arg i32) (result i32) (i32.add (i32.add (i32.ctz (local.get $arg)) (i32.clz (local.get $arg)))(i32.popcnt (local.get $arg)))) (func $func_h) (table $table_1 0 funcref) (func $table_operations (drop (table.size $table_1))) (memory $mem 512) (data (i32.const 8) "Â®ðŸ¦€") (func $mem_func (local $mem_size i32) (local $mem_grow i32) (local.set $mem_size (memory.size)) (local.set $mem_grow (memory.grow (i32.const 1))) (memory.fill (i32.const 1024) (i32.const 42) (i32.const 100)) (memory.copy (i32.const 1124) (i32.const 1024) (i32.const 100)) (memory.init 0 (i32.const 1224) (i32.const 0) (i32.const 13))) (type $func_i64_i64 (func (param i64) (result i64))) (func $double_i64 (type $func_i64_i64) (param $x i64) (result i64) (i64.mul (local.get $x) (i64.const 0))) (data (i32.const 8) "Â®ðŸ¦€"))