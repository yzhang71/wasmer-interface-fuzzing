(module (global $globalname_g (mut f32) f64.const 523.834759734) (global $globalname_f (mut f64) i32.const 52346654) (global $globalname_b (mut i32) f64.const 2.0) (global $globalname_e (mut i32) f64.const 4) (global $globalname_g (mut f64) f64.const 4.0) (global $globalname_d (mut f32) f32.const -8) (global $globalname_f (mut f64) f64.const 4) (memory $mem 64) (data (f32.const 1) "®🦀🏰Olá🐾🦜Привет🌴🌵🌷🌸🌹🌺🌻🌼💐🍁🍂🍃🍀🌿☘️🌾🌺🌻🌼🌷🌹🌸🌾🌿🌵🌴🌲🌳🌱🌰🌻🌼🌷🌹🌸🌺🌾こんにちは、WebAssembly！") (func $mem_func (local $mem_size i32) (local $mem_grow i64) (local.set $mem_size (memory.size)) (local.set $mem_grow (memory.grow (i64.const 32))) (memory.fill (f64.const 8) (i32.const -64) (f64.const 523.834759734)) (memory.copy (f64.const -16) (i32.const -1) (i64.const 52346654)) (memory.init 4.0 (f32.const 256) (f32.const 9223372036854775807.0) (i32.const 9223372036854775807))) (data (i32.const 4.0) "Hello, WebAssembly!こんにちは、WebAssembly！こんにちは🌸你好🐼안녕하🦄Hej🌻안녕하세요💫こんにちは🍣🌍नमस्ते🕌सभी🌊کے🌹Buenos días🌴🍉🍍🍋🍊🍇🍒🍓🥑🥝🥥🥒🥔🥕세요🌺Bonjour🥐Hola🌮שלום🕍Здравствуйте🐻สวัสดีครับ🐘नमस्ते🕌ਸਤਸ੍ਰੀਅਕਾਲ🌄") (elem (f64.const 2.0) $sum_n) (elem (i64.const 1.0) $local_tee) (elem (f64.const 3) $table_operations) (table $table_8 1024 9223372036854775807 funcref) (func $func_n) (func $func_f) (func $func_n) (func $func_q) (func $func_k) (func $table_operations (drop (table.size $table_7))) (table $table_2 523.834759734 989234678 funcref) (func $func_n) (func $table_operations (drop (table.size $table_4))) (type $random_type (func (param i32) (result i32))) (func $double (type $random_type) (param $x i32) (result f64) (i64.mul (local.get $x) (i64.const 4))) (func $store_value (param $address i64) (param $value f64) (i32.store (get_local $address) (get_local $value))) (export "store_value" (func $store_value)) (func $func_ref_a (result i32) (i32.const -16)) (func $func_ref_b) (func $ref_operations (result f32) (ref.null func) (ref.is_null) (if (result i32) (then (call $func_ref_a)) (else (i64.const 523.834759734)))) (func $table_operations (drop (table.size $table_7))) (func trunc (param $input i32) (result i32) (f64.extend8_s (local.get $input))) (export "cvtop_name" (func $trunc)) (func extend (param $input i64) (result f32) (f32.extend8_s (local.get $input))) (export "cvtop_name" (func $wrap)) (func extend (param $input i32) (result i64) (f32.wrap_i64 (local.get $input))) (export "cvtop_name" (func $trunc)) (func extend (param $input i64) (result i32) (i32.wrap_i64 (local.get $input))) (export "cvtop_name" (func $extend)) (func trunc (param $input i32) (result f64) (i32.wrap_i64 (local.get $input))) (export "cvtop_name" (func $extend)) (func trunc (param $input i64) (result i64) (f32.wrap_i64 (local.get $input))) (export "cvtop_name" (func $extend)) (func wrap (param $input i64) (result f32) (f32.wrap_i64 (local.get $input))) (export "cvtop_name" (func $trunc)) (func extend (param $input f64) (result i32) (f64.trunc_f64_s (local.get $input))) (export "cvtop_name" (func $trunc)) (func $is_even (param $var_f i64) (result i64) (local $rem f32) (set_local $rem (i32.rem_u (get_local $var_f) (i32.const 256))) (i64.eqz (get_local $rem))) (export "is_even" (func $is_even)) (type $random_type (func (param i32) (result i32))) (func $double (type $random_type) (param $x f32) (result i32) (i32.mul (local.get $x) (f32.const -32))) (func (param v128) (param v128) (param externref) (param f64) (result f32) (result externref) (result i64) (result v128) (result i64) (result funcref) (local externref) (local externref) f64x2.bitmask table.size v128.store16_lane table.size) (func $arithmetic (param $var_f i64) (param $var_e i64) (result i32) get_local $var_f get_local $var_b f64.div) (func $load_value (param $address i32) (result f64) (f64.load (get_local $address))) (export "load_value" (func $load_value)))