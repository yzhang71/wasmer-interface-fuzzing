<funcname> = arithmetic
<varname> = $var_a 
<varname> = $var_b
<varname> = $var_c 
<varname> = $var_d
<varname> = $var_e 
<varname> = $var_f
<varname> = $var_g 
<varname> = $var_h
<params> = (param <varname> <num_type>) (param <varname> <num_type>) 
<instruction> = get_local <varname> get_local <varname> <num_type>.add
<instruction> = get_local <varname> get_local <varname> <num_type>.sub
<instruction> = get_local <varname> get_local <varname> <num_type>.mul
<instruction> = get_local <varname> get_local <varname> <num_type>.div
<instructions> = <instruction>
<func_arithmetic> = (func $<funcname> <params> <result> <instructions>)

<rem> = rem
<set_rem> = (set_local $<rem> (<num_type>.rem_u (get_local <varname>) (<num_type>.const <num_value>)))
<get_rem> = (<num_type>.eqz (get_local $<rem>))
<local_rem> = (local $<rem> <num_type>)
<func_body_even> = <local_rem> <set_rem> <get_rem>
<params_even> = (param <varname> <num_type>)
<funcname_even> = is_even
<export_is_even> = (export "<funcname_even>" (func $<funcname_even>))
<funcs_even> = (func $<funcname_even> <params_even> <result> <func_body_even>)

<id> = 0
<id> = 1
<id> = 2
<id> = 3
<id> = 4
<id> = 5
<id> = 6
<id> = 7
<id> = 8
<id> = 9
<min> = <num_value>
<max> = <num_value>
<limits> = <min> <max>
<elem_type> = funcref
<table_type> = <elem_type>
<table_id> = $table_<id>
<table> = (table <table_id> <limits> <table_type>)
<table_func> = (func $func_a)
<table_func> = (func $func_b)
<table_func> = (func $func_c)
<table_func> = (func $func_d)
<table_func> = (func $func_e)
<table_func> = (func $func_f)
<table_func> = (func $func_g)
<table_func> = (func $func_h)
<table_func> = (func $func_i)
<table_func> = (func $func_j)
<table_func> = (func $func_k)
<table_func> = (func $func_l)
<table_func> = (func $func_m)
<table_func> = (func $func_n)
<table_func> = (func $func_o)
<table_func> = (func $func_p)
<table_func> = (func $func_q)
<table_funcs nonrecursive=true p=0.1> = <table_func>
<table_funcs> = <table_funcs> <table_func>
<table_operation> = (func $table_operations (drop (table.size <table_id>)))
<tables nonrecursive=true p=0.1> = <table> <table_funcs> <table_operation>
<tables> = <tables> <table> <table_funcs> <table_operation>

<typy_name> = $random_type
<type> = (type <typy_name> (func (param <num_type>) (result <num_type>)))
<type_params> = (param $x <num_type>)
<type_instruction> = (<num_type>.mul (local.get $x) (<num_type>.const <num_value>))
<type_func> = <type> (func $double (type <typy_name>) <type_params> <result> <type_instruction>)

<globalname> = $globalname_a 
<globalname> = $globalname_b
<globalname> = $globalname_c
<globalname> = $globalname_d
<globalname> = $globalname_e 
<globalname> = $globalname_f
<globalname> = $globalname_g
<globalname> = $globalname_h
<global_mutability> = mut
<global_type> = <num_type>
<global_value> = <num_type>.const <num_value>
<global> = (global <globalname> (<global_mutability> <global_type>) <global_value>)
<globals nonrecursive=true p=0.1> = <global>
<globals> = <globals> <global>

<func_idx> = $arithmetic
<func_idx> = $table_operations
<func_idx> = $double
<func_idx> = $store_value
<func_idx> = $load_value
<func_idx> = $ref_operations
<func_idx> = $local_tee
<func_idx> = $sum_n
<func_idx> = $operations
<func_idx> = $store_num
<func_idx> = $set_global
<func_idx> = $get_global
<func_idx> = $wrap
<func_idx> = $extend
<func_idx> = $trunc
<func_idx> = $is_even
<offset> = <num_value>
<elem> = (elem (<num_type>.const <offset>) <func_idx>)
<elems nonrecursive=true p=0.1> = <elem>
<elems> = <elems> <elem>

<mem_name> = $mem
<mem_func_name> = $mem_func
<memory_create> = (memory <mem_name> <num_value>)
<mem_size> = (local $mem_size <num_type>)
<mem_grow> = (local $mem_grow <num_type>)
<set_size> = (local.set $mem_size (memory.size))
<set_grow> = (local.set $mem_grow (memory.grow (<num_type>.const <num_value>)))
<memory_fill> = (memory.fill (<num_type>.const <num_value>) (<num_type>.const <num_value>) (<num_type>.const <num_value>))
<memory_copy> = (memory.copy (<num_type>.const <num_value>) (<num_type>.const <num_value>) (<num_type>.const <num_value>))
<memory_init> = (memory.init <num_value> (<num_type>.const <num_value>) (<num_type>.const <num_value>) (<num_type>.const <num_value>))
<mem_func> = (func <mem_func_name> <mem_size> <mem_grow> <set_size> <set_grow> <memory_fill> <memory_copy> <memory_init>)
<memory> = <memory_create> <data> <mem_func>

<export_store> = (export "store_value" (func $store_value))
<export_load> = (export "load_value" (func $load_value)) 

<func_ref_a> = (func $func_ref_a <result> (<num_type>.const <num_value>))
<func_ref_b> = (func $func_ref_b)
<ref_null> = (ref.null func)
<ref_is_null> = (ref.is_null)
<if_null> = if <result> (then (call $func_ref_a))
<else_null> = (else (<num_type>.const <num_value>))
<ref_oper> = (func $ref_operations <result> <ref_null> <ref_is_null> (<if_null> <else_null>))
<ref_func> = <func_ref_a> <func_ref_b> <ref_oper>

<local> = (local <num_type>)
<local_set_get> = (local.set <num_value> (local.get <num_value>))
<local_tee> = (local.tee <num_value> (<num_type>.add (local.get <num_value>) (<num_type>.const <num_value>)))
<local_opers> = (func $local_tee (param <num_type>) <result> <local> <local_set_get> <local_tee>)
<local_opers> = (func $local_tee (param <num_type>) <result> <local> <local_set_get> <local_tee>) (export "local_tee" (func $local_tee))

<sum_name> = sum_n
<local_init_sum> = (local $sum <num_type>)
<local_init_i> = (local $i <num_type>)
<init_sum> = <num_type>.const <num_value> local.set $sum
<set_iter> = <num_type>.const <num_value> local.set $i
<ret_sum> = local.get $sum
<loop_terminate> = local.get $i local.get $n <num_type>.gt_s if br $loop end
<add_iter_sum> = local.get $sum local.get $i <num_type>.add local.set $sum
<incre_iter> = local.get $i <num_type>.const <num_value> <num_type>.add local.set $i
<continue_loop> = br $loop
<loop_body> = (loop $loop <loop_terminate> <add_iter_sum> <incre_iter> <continue_loop>)
<loop_func> = (func $<sum_name> (export "<sum_name>") (param $n <num_type>) <result> <local_init_sum> <local_init_i> <init_sum> <set_iter> <loop_body> <ret_sum>)

<strat_body> = (start $store_num)
<start_func> = (func $store_num (<num_type>.store (<num_type>.const <num_value>) (<num_type>.const <num_value>))) 
<start> = (memory <num_value>) (export "memory" (memory <num_value>)) <start_func> <strat_body>

<ctz_inst> = (<num_type>.ctz (local.get $arg))
<clz_inst> = (<num_type>.clz (local.get $arg))
<popcnt_inst> = (<num_type>.popcnt (local.get $arg)) 
<unop_body> = (func $operations (param $arg <num_type>) <result> (<num_type>.add (<num_type>.add <ctz_inst> <clz_inst>)<popcnt_inst>))
<unop_inst> = <unop_body>

<result> = (result <num_type>)

<num_type> = i32 
<num_type> = i64 
<num_type> = f32 
<num_type> = f64

<num_value> = -1
<num_value> = 0
<num_value> = 2147483647
<num_value> = 1024
<num_value> = 3
<num_value> = 4
<num_value> = 52346654
<num_value> = -8465473543.234234
<num_value> = 1
<num_value> = 9223372036854775807
<num_value> = -9223372036854775807
<num_value> = 4
<num_value> = 0.0
<num_value> = 2147483647.0
<num_value> = -2147483647.0
<num_value> = 2.0
<num_value> = 3.0
<num_value> = -678234928375235
<num_value> = -873284678
<num_value> = -5345345346
<num_value> = -8
<num_value> = -16
<num_value> = -32
<num_value> = 523.834759734
<num_value> = -8465473543.4387534
<num_value> = -64
<num_value> = -128
<num_value> = -256
<num_value> = -512
<num_value> = -1024.345345
<num_value> = 4.0
<num_value> = 1.0
<num_value> = 9223372036854775807.0
<num_value> = -9223372036854775807.0
<num_value> = 8
<num_value> = 16
<num_value> = 32
<num_value> = 64
<num_value> = 128
<num_value> = 256
<num_value> = 512
<num_value> = 1024
<num_value> = -2452346536.5345346
<num_value> = 758394
<num_value> = 989234678

<data> = (data (<num_type>.const <num_value>) "Hello, WebAssembly!こんにちは、WebAssembly！こんにちは🌸你好🐼안녕하🦄Hej🌻안녕하세요💫こんにちは🍣🌍नमस्ते🕌सभी🌊کے🌹Buenos días🌴🍉🍍🍋🍊🍇🍒🍓🥑🥝🥥🥒🥔🥕세요🌺Bonjour🥐Hola🌮שלום🕍Здравствуйте🐻สวัสดีครับ🐘नमस्ते🕌ਸਤਸ੍ਰੀਅਕਾਲ🌄")
<data> = (data (<num_type>.const <num_value>) "こんにちは🌸안녕하세요🌺🚀你好🐼Bonjour🥐Hola🌮שלום🕍Здравствуйте🐻สวัสดีครับ🐘नमस्ते🕌🌄❤️🎉🎶🌈🏞🐬🏄‍♂️🏯\00\00\80\3Fこんにちは、WebAssembly！") 
<data> = (data (<num_type>.const <num_value>) "こんにちは、WebAssembly！🌞Grüßgott🦉🦄Hej🌻안녕하세요💫こんにちは🍣🌍नमस्ते🕌सभी🌊کے🌹Buenos días🌴🍉🍍🍋🍊🍇Buenos días🌴🍉🍍🍋🍊🍇🍒🍓🥑🥝🥥🥒🥔🥕세요🌺Bonjour🥐Hola🌮שלום🕍Здравствуйте🐻สวัสดีครั🍒🍓🥑🥝🥥🥒🥔🥕🥨") 
<data> = (data (<num_type>.const <num_value>) "®🦀🏰Olá🐾🦜Привет🌴🌵🌷🌸🌹🌺🌻🌼💐🍁🍂🍃🍀🌿☘️🌾🌺🌻🌼🌷🌹🌸🌾🌿🌵🌴🌲🌳🌱🌰🌻🌼🌷🌹🌸🌺🌾こんにちは、WebAssembly！") 
<data> = (data (<num_type>.const <num_value>) "こんにちは안녕하세요你好BonjourHolaשלוםЗдравствуйтеสวัสดีครับनमस्तेسلام🌍CiaoGutenTagこんにちは안녕하세요你好BonjourHolaשלוםЗдравствуйтеสวัสดีครับनमस्तेسلام🚀CiaoGutenTagこんにちは안녕하세요你好BonjourHolaשלוםЗдравствуйтеสวัสดีครับनमस्तेسلام🌐CiaoGutenTagこんにちは안녕하세요你好BonjourHolaשלוםЗдравствуйтеสวัสดีครับनमस्तेسلام🌟CiaoGutenTagこんにちは안녕하세요你好BonjourHolaשלוםЗдравствуйтеสวัสดีครับनमस्तेسلام🌟CiaoGutenTag👯⛔こんにちは、こんにちは🌸안녕하세요🌺🚀你好🐼Bonjour🥐Hola🌮שלום🕍Здравствуйте🐻สวัสดีครับ🐘नमस्ते🕌🌄❤️🎉🎶🌈🏞🐬🏄‍♂️🏯🌲🌳🌱🌰WebAssembly！") 
<data> = (data (<num_type>.const <num_value>) "🌀📂🎯🐑🌀Привет, こんにちは안녕하세요你好BonjourHolaשלוםЗдравствуйтеสวัสดีครับनमस्ते🌎CiaoGutenTagこんにちは안녕하세요你好BonjourHolaשלוםЗдравствуйтеสวัสดีครับनमस्ते🚀CiaoGutenTagこんにちは안녕하세요你好BonjourHolaשלוםЗдравствуйтеสวัสดีครับनमस्ते🌐CiaoGutenTagмир!📂📝⬇️🏃‍♀️✨📦📂📝⬇️🏃‍♀️✨📦")
<data> = (data (<num_type>.const <num_value>) "こんにちは안녕하세요你好🌴🌵🌷🌸🌹🌺🌻🌼💐🍁🍂🍃🍀🌿☘️🌾🌺🌻🌼🌷🌹🌸🌾🌿🌵🌴🌲🌳🌱🌰🌻🌼🌷🌹🌸🌺🌾BonjourHolaשלוםЗдравствуйтеสวัสดีครับनमस्ते🌍CiaoGutenTagこんにちは안녕하세요你好BonjourHolaשלום🐑🌀Привет, мир!📂⚠️") 
<data> = (data (<num_type>.const <num_value>) "🐑🌀⬇️Merhabaこんにちは안🌴🌵🌷🌸🌹🌺🌻🌼💐🍁🍂🍃🍀🌿☘️🌾🌺🌻🌼🌷🌹🌸🌾🌿🌵🌴🌲🌳🌱🌰🌻🌼🌷🌹🌸🌺🌾녕하세요你好OiHejCześćПриветSelamสวัสดีครับTereTjenaJamboSalutonLabasHeiЗдравоHalloAhojSziasztokMoi🏃‍♀️✨🏃‍♀️✨📦📂📝⬇️📦📂") 
<data> = (data (<num_type>.const <num_value>) "🌀📂ПриветnjourHolaש🌴🌵🌷🌸🌹🌺🌻🌼💐🍁🍂🍃🍀🌿☘️🌾🌺🌻🌼🌷🌹🌸🌾🌿🌵🌴🌲🌳🌱🌰🌻🌼🌷🌹🌸🌺🌾לוםЗдравствуйтеสวัสดีครับनमस्तेسلام🌍CiaoGutenTagこんにちは안녕하세요你好BonjourHolaשלוםЗдравствуйтеสวัสดีครับनमस्तेسلام🚀CiaoGutenTagこん, мир!ℹ️") 
<data> = (data (<num_type>.const <num_value>) "👯🏃‍♀️✨📦📂📝⬇️⛔🏃‍♀️🦄Hej🌻안녕하세요💫こんにちは🍣🌍नमस्ते🕌सभी🌊کے🌹Buenos días🌴🍉🍍🍋🍊🍇🍒🍓🥑你好BonjourHolaשלוםЗдравствуйтеสวัสดีครับनमस्ते🌍CiaoGutenTagこんにち🥝🥥🥒🥔🥕✨📦📂📝⬇️🌀📂") 
<data> = (data (<num_type>.const <num_value>) "🌀⬇️🏃‍♀️✨Hell🌾🌺🌻🌼🌷🌹🌸🌾🌿🌵🌴🌲你好🐼안녕하🦄Hej🌻안녕하세요💫こんにちは🍣🌍नमस्ते🕌सभी🌊کے🌹Bueno🌳🌱🌰🌻🌼🌷o, Привет, мир!!こんにちは、WebAssembly📦📂") 
<data> = (data (<num_type>.const <num_value>) "🐑🌀Привет, мир!jourHolaשלוםЗдравствуйт🌾🌺🌻🌼🌷🌹🌸🌾🌿🌵🌴🌲еสวัสดีครับםЗдравствуйтеสวัสดีครับनमस्ते🌍CiaoGutenTagこんにちは안녕하세요नमस्ते🌍CiaoGutenTagこんにちは안녕하세요你好BonjourHolaשלום🐑🌀Привет, ми📂®🦀") 
<data> = (data (<num_type>.const <num_value>) "🌀🏃‍♀️✨📦📂🐑🌀ПрПривет🌴🌵🌷🌸🌹🌺🌻🌼💐🍁🍂🍃🍀🌿☘️🌾🌺🌻🌼🌷🌹ивет, мтеสวัสดีครับनमस्तेسلام🌍CiaoGutenTagこんにちは안녕하세요你好BonjourHolaשלוםЗдравствуйтеสวัสดีครับир!📂📝⬇️🏃‍♀️📂🦀") 
<data> = (data (<num_type>.const <num_value>) "にちは🌀🐑🌀🌟CiaoGutenTagこんにちは안녕하세요你好BonjourHolaשלוםЗдравствуйтеสวัสดีครับनमस्तेسلام🌟CiaoGutenTag👯⛔こんにちは、こんにちは🌸안녕하세요🌺🚀你好🐼Bonjour🥐Hola🌮שלום🕍Здравствуйте🐻สวัสดีครับ🐘नमस्ते🕌🌄❤️🎉🎶🌈🏞🐬🏄‍♂️🏯🌲🌳🌱🌰WebAssemblyПривет, мир!📂📂🔧") 
<data> = (data (<num_type>.const <num_value>) "👯⛔🌀📂®🦀こんにち🌻🌼🌷🌹🌸🌾🌿🌵🌴🌲еสวัสดีครับםЗдравствуйтеสวัสดีครับनमस्ते🌍CiaoGuteBuenos días🌴🍉🍍🍋🍊🍇🍒🍓🥑🥝🥥🥒🥔🥕세요🌺Bonjour🥐Hola🌮שלום🕍Здравствуйте🐻สวัสดีครัnTagこんにちは안녕하세요नमस्ते🌍Ciは") 
<data> = (data (<num_type>.const <num_value>) "🌀👯⛔📂🐑🌀Привет, мир!🌻🌼🌷🌹🌸🌾🌿🌵🌴🌲🌳🌱🌰🌻🌼🌷🌹🌸🌺🌾こんにちはтеสวัสดีครับनमस्तेسلام🌍CiaoGutenTagこんにちは안녕하세요你好BonjourHolaשלוםЗдравствуйтеสวัสดีครับ、Web📂🏃‍♀️✨📦📂📝⬇️") 
<data> = (data (<num_type>.const <num_value>) "🐑🌀Привет, мир!📂Hello, !こんにちは、WebAssembly🌾🌿🌵🌴🌲еสวัสดีครับםЗдравствуйтеสวัสดีครับनमस्ते🌍CiaoGutenTagこんにちは안녕하세요नमस्ते🌍CiaoGut🐑") 
<data> = (data (<num_type>.const <num_value>) "🌀📂🎯📝⬇️🏃‍♀️✨📦📂📝⬇️Hola🌮שלום🕍Здравствуйте🐻สวัสดีครับ🌾🌿🌵🌴🌲еสวัสดีครับםЗдравствуйтеสวัสดีครับनमस्ते🌍CiaoGutenTagこんにちは안녕하세요नमस्ते🌍CiaoGut🐘नमस्ते🕌🌄❤️🎉🎶🌈🏞🐬🏄‍♂️🏯\00\00\80\3Fこんにちは、WebAsse📂") 
<data> = (data (<num_type>.const <num_value>) "👯⛔🏃‍♀️✨📦📂🏃‍♀️✨📦📂📝⬇️📝⬇️🌻🌼🌷🌹🌸🌾🌿🌵🌴🌲🌳🌱🌰🌻🌼🌷🌹🌸🌺🌾こんにтеสวัสดีครับनमस्तेسلام🌍CiaoGutenTagこんにちは안녕하세요你好BonjourHolaשלוםЗдравствуйтеสวัสดีครับちは、Web🌀📂") 
<data> = (data (<num_type>.const <num_value>) "🌀📂🎯Hello, Привет, мир!!こんにちは、WebAssembly📝🌀📂ℹ️🌾🌿🌵🌴🌲еสวัสดีครับםЗдравствуйтеสวัสดีครับनमस्ते🌍CiaoGutenTagこんにちは안녕하세요नमस्ते🌍CiaoGut⬇️📂") 
<data> = (data (<num_type>.const <num_value>) "にちは🌀🏃‍♀️✨🐑🌀Привет, мир!📂📦📂🌵🌴🌲еสวัสดีครับםЗдравствуйтеสวัสดีครับनमस्ते🌍CiaoGutenTagこんにちは안녕하세요नमस्ते🌍C📝⬇️🏃‍♀️📂") 
<data> = (data (<num_type>.const <num_value>) "🌀📂🎯📝⬇️🏃‍♀️✨📦📂📝⬇️🌵🌴🌲еสวัสดีครับםЗдравствуйтеสวัสดีค🌾🌿🌵🌴🌲еสวัสดีครับםЗдравствуйтеสวัสดีครับनमस्ते🌍CiaoGutenTagこんにちは안녕하세요नमस्ते🌍CiaoGutรับनमस्ते🌍CiaoGutenTagこんにちは안녕하세요नमस्ते🌍C📂") 
<data> = (data (<num_type>.const <num_value>) "👯⛔🏃‍♀️✨📦📂🐑🌀Привет, мир!📂📝⬇️🌵🌴🌲еสวัสดีครับםЗдравствуйтеสวัสดีครับनमस्ते🌍CiaoGutenTagこんにちは안녕하세요नमस्ते🌍C🌀📂") 
<data> = (data (<num_type>.const <num_value>) "にちは🌀🏃‍♀️✨📦📂📝⬇️🏃‍♀️🍂🍃🍀🌿☘️🌾🌺🌻🌼🌷🌹🌸🌾🌾🌿🌵🌴🌲еสวัสดีครับםЗдравствуйтеสวัสดีครับनमस्ते🌍CiaoGutenTagこんにちは안녕하세요नमस्ते🌍CiaoGut🌿🌵🌴🌲🌳🌱🌰🌻🌼🌷🌹🌸🌺🌾こんにちは、WebAssembly📂") 
<datas nonrecursive=true p=0.1> = <data>
<datas> = <datas> <data>

<address> = $address
<value> = $value
<param_addr> = (param <address> <num_type>)
<param_value> = (param <value> <num_type>)
<store_body> = (<num_type>.store (get_local <address>) (get_local <value>))
<store_func> = (func $store_value <param_addr> <param_value> <store_body>)
<load_body> = (<num_type>.load (get_local <address>))
<load_func> = (func $load_value <param_addr> <result> <load_body>)

<global_name> = $global
<set_global> = (func $set_global (param <value> <num_type>) get_local <value> set_global <global_name>)
<get_global> = (func $get_global <result> get_global <global_name>)

<cvtop_name> = wrap
<cvtop_name> = extend
<cvtop_name> = trunc
<cvtop_body> = <num_type>.wrap_i64
<cvtop_body> = <num_type>.extend8_s
<cvtop_body> = <num_type>.trunc_f64_s
<cvtop_func> = (func <cvtop_name> (param $input <num_type>) <result> (<cvtop_body> (local.get $input)))
<cvtop_export> = (export "cvtop_name" (func $<cvtop_name>))
<cvtop_funcs> = <cvtop_func> <cvtop_func> <cvtop_func> <cvtop_export> <cvtop_export> <cvtop_export>
<cvtop_funcs> = <cvtop_func> <cvtop_func> <cvtop_export> <cvtop_export>
<cvtop_funcs> = <cvtop_func> <cvtop_export>

<vec_type> = v128
<ref_type> = funcref 
<ref_type> = externref
<val_type> = <vec_type>
<val_type> = <ref_type>
<val_type> = <num_type>
<var> = $general_var

<general_func_param> = (param <val_type>)
<general_func_params nonrecursive=true p=0.1> = <general_func_param>
<general_func_params> = <general_func_params> <general_func_param>

<general_func_result> = (result <val_type>)
<general_func_results nonrecursive=true p=0.1> = <general_func_result>
<general_func_results> = <general_func_results> <general_func_result>

<general_func_local> = (local <val_type>)
<general_func_locals nonrecursive=true p=0.1> = <general_func_local>
<general_func_locals> = <general_func_locals> <general_func_local>

<general_func_instr> = unreachable
<general_func_instr> = nop
<general_func_instr> = br <var>
<general_func_instr> = br_if <var>
<general_func_instr> = br_table <var>
<general_func_instr> = return
<general_func_instr> = call <var>
<general_func_instr> = call_indirect <general_func_type>
<general_func_instr> = drop
<general_func_instr> = select
<general_func_instr> = unreachable
<general_func_instr> = unreachable
<general_func_instr> = unreachable
<general_func_instr> = unreachable
<general_func_instr> = unreachable
<general_func_instr> = unreachable
<general_func_instr> = unreachable
<general_func_instr> = unreachable
<general_func_instr> = unreachable
<general_func_instr> = unreachable
<general_func_instr> = unreachable
<general_func_instr> = unreachable
<general_func_instr> = unreachable
<general_func_instrs nonrecursive=true p=0.1> = <general_func_instr>
<general_func_instrs> = <general_func_instrs> <general_func_instr>

<general_func_type> = <general_func_params> <general_func_results>
<general_func> = (func <general_func_type> <general_func_locals> <general_func_instrs>)

<func> = <cvtop_funcs>
<func> = <func_arithmetic> 
<func> = <funcs_even> <export_is_even>
<func> = <set_global> <get_global> 
<func> = <table_operation>
<func> = <type_func>
<func> = <store_func> <export_store>
<func> = <load_func> <export_load>
<func> = <ref_func>
<func> = <local_opers>
<func> = <loop_func>
<func> = <start>
<func> = <unop_body>
<func> = <mem_func>
<func> = <general_func>

<funcs nonrecursive=true p=0.1> = <func>
<funcs> = <funcs> <func>

<module> = (module <globals> <memory> <datas> <elems> <tables> <funcs>)

!begin lines
<module>;
!end lines

